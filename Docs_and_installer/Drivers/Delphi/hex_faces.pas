unit HEX_FACES;
{**************************************************************************}
{                                                                          }
{    This C DLL header file first (automatic) conversion generated by:     }
{    HeadConv 4.0 (c) 2000 by Bob Swart (aka Dr.Bob - www.drbob42.com)     }
{      Final Delphi-Jedi (Darth) command-line units edition                }
{                                                                          }
{    Generated Date: 11.02.2008                                            }
{    Generated Time: 09:26:47                                              }
{                                                                          }
{**************************************************************************}

interface
uses
{$IFDEF WIN32}
  Windows;
{$ELSE}
  Wintypes, WinProcs;
{$ENDIF}


{=> t:\entwicklung\hostsoftware\gcs_dllcom\pi_g_gcs2_dllcom\samples\delphi\HEX_FACES.H <=}

{///hex_faces.h }
{/// }
{/// $HeaderUTC: hex_faces.pas, 3, 2013-12-04 14:05:11Z, Kurt Zimmermann$ }
{/// $LogUTC[5]:
{///  3    Samples    1.2         2013-12-04 14:05:11Z Kurt Zimmermann
{///       aktualisiert
{///  2    Samples    1.1         2013-04-19 09:17:33Z Kurt Zimmermann Version
{///       geschickt an :
{///       Mohd Zulhadi Zainal Abidin
{///       Philips Technologie GmbH
{///       U-L-M Photonics
{///       Backend
{///       Lise-Meitner-Str. 13
{///       D-89081 Ulm, Germany
{///       Tel. +49 (0)731 550194-079, Fax +49 (0)731 550194-026
{///       e-mail: hadi.abidin@ulm-photonics.de
{///       internet: www.ulm-photonics.de, www.philips.de
{///       
{///  1    Samples    1.0         2013-04-16 06:20:58Z Kurt Zimmermann  
{/// $ }
{/// }
{$IFNDEF HEX_FACES_}
{$DEFINE HEX_FACES_}


const
  IF_IEEE_488_NAME = 'IEEE 488';
const
  IF_RS_232_NAME = 'RS-232';
const
  IF_C843_BOARD_NAME = 'PCI Board';
const
  IF_FTDI_USB_NAME = 'FTDI USB';
const
  IF_TCPIP_NAME = 'TCP/IP';
const
  IF_CYPRESS_USB_NAME = 'Cypress USB';

const
  RS232_ID = 'RS232\0';
const
  IB_ID = 'IEEE488\0';
const
  FTDI_USB_ID = 'FTDIUSB\0';
const
  CYPRESS_USB_ID = 'CYPRESSUSB\0';
const
  TCP_IP_ID = 'TCPIP\0';
const
  GPIB_NI_ID = 2;
const
  DEFAULT_BOARD_ID = 0;
const
  DEFAULT_DEVICE_ID = 4;
const
  DEFAULT_MANUFACTURER = 'NI\0';
const
  DEFAULT_EOT_MODE = 1;
const
  DEFAULT_EOS_TERMINATE_READ = 1;
const
  DEFAULT_EOS_SET_EOI_LINE = 0;
const
  DEFAULT_EOS_SIGN = 10;
const
  DEFAULT_TIME_OUT = 1;
const
  DEFAULT_TIME_OUT_MS = 10000;
const
  DEFAULT_COM_PORT = 1;
const
  DEFAULT_BAUDRATE = 57600;
const
  DEFAULT_PARITY = NOPARITY;
const
  DEFAULT_DATABITS = 8;
const
  DEFAULT_STOPBITS = ONESTOPBIT;
const
  DEFAULT_HANDSHAKE = 'XONXOF\0';


type
  rs232_face_strTAG = (
    INTERFACE_NONE {= 0}, 
    INTERFACE_RS232 {= 1}, 
    INTERFACE_NI_GPIB {= 2}, 
    INTERFACE_FTDI_USB {= 4}, 
    INTERFACE_TCP_IP {= 8}, 
    INTERFACE_C843_PCI {= 16}, 
    INTERFACE_CYPRESS_USB {= 32} );

type
  rs232_face_strTAG = (
    TCP_IP_NO_SCAN {= 0}, 
    TCP_IP_UDP_SCAN {= 1}, 
    TCP_IP_XPORT_SCAN {= 2}, 
    TCP_IP_ALL_SCAN {= TCP_IP_UDP_SCAN | TCP_IP_XPORT_SCAN} );


{+//* }
{-* \ingroup general }
{-* Structure for the parameters of the RS232 interface. }
{= }
type
  rs232_face_strTAG = record
    port_nm: Integer;
    baud_rate: Integer;
    parity: Integer;
    data_bits: Integer;
    stop_bits: Integer;
    hand_shake: Array[0..24-1] of Char;
  end {rs232_face_strTAG};

{+//* }
{-* \ingroup general }
{-* Structure for parameters of the IEEE488 interface }
{= }
type
  ni_gpib_face_strTAG = record
{/// }
    board_id: Integer;
    device_id: Integer;
    manufacturer: Array[0..24-1] of Char;
    eot_mode: Bool;
    eos_terminate_read: Bool;
    eos_set_eoi_line: Bool;
    eos_char: Integer;
    time_out: Integer;
  end {ni_gpib_face_strTAG};

{+//* }
{-* \ingroup general }
{-* Structure for the parameters of the FTDI USB interface. }
{= }
type
  FTDI_USB_face_strTAG = record
    description: Array[0..81-1] of Char;
    serialnumber: Array[0..11-1] of Char;
    description_filter: Array[0..65-1] of Char;
    rs232_str: RS232_FACE_STR;
  end {FTDI_USB_face_strTAG};


{+//* }
{-* \ingroup general }
{-* Structure for the parameters of the TCP/IP interface. }
{= }
type
  TCP_IP_face_strTAG = record
    hostname: Array[0..256-1] of Char;
    port: Word;
    xport_idn_filter: Array[0..65-1] of Char;
  end {TCP_IP_face_strTAG};


{+//* }
{-* \ingroup general }
{-* Structure used to store the settings in the registry }
{= }
type
  hex_face_str_v1TAG = record
    rs232_str: RS232_FACE_STR;
    ni_ib: NI_GPIB_FACE_STR;
    last_face: Array[0..24-1] of Char;
  end {hex_face_str_v1TAG};

{+//* }
{-* \ingroup general }
{-* Structure used to store the settings in the registry }
{= }
type
  hex_face_str_v2TAG = record
        sprintf(version, "%s", "VER002"): Integer;
  end {hex_face_str_v2TAG};
{/////////////////////////// new in "VER002" }

{+//* }
{-* \ingroup general }
{-* Structure used to store the settings in the registry }
{= }
type
  hex_face_str_v3TAG = record
        sprintf(version, "%s", "VER003"): Integer;
  end {hex_face_str_v3TAG};
{/////////////////////////// new in "VER002" }
{/////////////////////////// new in "VER003" }


{$ENDIF}

var
  DLLLoaded: Boolean { is DLL (dynamically) loaded already? }
    {$IFDEF WIN32} = False; {$ENDIF}

implementation

var
  SaveExit: pointer;
  DLLHandle: THandle;
{$IFNDEF MSDOS}
  ErrorMode: Integer;
{$ENDIF}

  procedure NewExit; far;
  begin
    ExitProc := SaveExit;
    FreeLibrary(DLLHandle)
  end {NewExit};

procedure LoadDLL;
begin
  if DLLLoaded then Exit;
{$IFNDEF MSDOS}
  ErrorMode := SetErrorMode($8000{SEM_NoOpenFileErrorBox});
{$ENDIF}
  DLLHandle := LoadLibrary('HEX_FACES.DLL');
  if DLLHandle >= 32 then
  begin
    DLLLoaded := True;
    SaveExit := ExitProc;
    ExitProc := @NewExit;
  end
  else
  begin
    DLLLoaded := False;
    { Error: HEX_FACES.DLL could not be loaded !! }
  end;
{$IFNDEF MSDOS}
  SetErrorMode(ErrorMode)
{$ENDIF}
end {LoadDLL};

begin
  LoadDLL;
end.
